name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean
      upload_artifacts:
        description: 'Upload build artifacts'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build-release:
    name: Build Release (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            script: ./script/bundle-linux
            artifact-name: zed-linux-x86_64
            artifact-path: target/release/zed-*.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            script: ./script/bundle-mac
            artifact-name: zed-macos-x86_64
            artifact-path: target/release/Zed.dmg
          - os: macos-latest
            target: aarch64-apple-darwin
            script: ./script/bundle-mac
            artifact-name: zed-macos-aarch64
            artifact-path: target/release/Zed.dmg

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          clean: false
          submodules: "recursive"
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: ./script/linux

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.target }}-release-
            ${{ matrix.os }}-release-

      - name: Build release bundle
        run: ${{ matrix.script }}
        env:
          CARGO_TARGET_DIR: target
          RUSTFLAGS: "-C target-cpu=native"

      - name: Upload artifacts
        if: inputs.upload_artifacts || github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: inputs.create_release || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate release notes
        id: release_notes
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v(.+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            
            # Generate changelog since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [[ -n "$LAST_TAG" ]]; then
              echo "## Changes since ${LAST_TAG}" > release_notes.md
              git log --pretty=format:"* %s (%h)" ${LAST_TAG}..HEAD >> release_notes.md
            else
              echo "## Release ${VERSION}" > release_notes.md
              echo "Initial release" >> release_notes.md
            fi
          else
            echo "version=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
            echo "## Development Build" > release_notes.md
            echo "Built from commit $(git rev-parse --short HEAD)" >> release_notes.md
          fi

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*/*"
          bodyFile: "release_notes.md"
          tag: ${{ github.ref_name }}
          name: "Zed ${{ steps.release_notes.outputs.version }}"
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          token: ${{ secrets.GITHUB_TOKEN }}
