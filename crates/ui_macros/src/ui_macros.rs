mod derive_path_str;

use proc_macro::TokenStream;

/// Derive the `path` method for an enum.
///
/// This macro generates a `path()` method for an enum, which returns a string
/// representation of the enum variant's path.
///
/// # Attributes
///
/// - `#[path_str(prefix = "...")]`: Specifies a prefix to be added to all paths (required).
/// - `#[path_str(suffix = "...")]`: Specifies an optional suffix to be added to all paths.
/// - `#[strum(serialize_all = "...")]`: Optionally specifies a case conversion for variant names.
///
/// # Example
///
/// ```
/// use ui_macros::{DerivePathStr, path_str};
/// use strum::EnumString;
///
/// #[derive(Debug, EnumString, DerivePathStr)]
/// #[strum(serialize_all = "snake_case")]
/// #[path_str(prefix = "test_prefix", suffix = ".txt")]
/// enum MyEnum {
///     FooBar,
///     Baz,
/// }
///
/// assert_eq!(MyEnum::FooBar.path(), "test_prefix/foo_bar.txt");
/// assert_eq!(MyEnum::Baz.path(), "test_prefix/baz.txt");
/// ```
///
/// # Panics
///
/// This macro will panic if used on anything other than an enum.
#[proc_macro_derive(DerivePathStr, attributes(path_str))]
pub fn derive_path_str(input: TokenStream) -> TokenStream {
    derive_path_str::derive_path_str(input)
}

/// Marker attribute for use with `DerivePathStr`.
///
/// This attribute is used to specify the prefix and optional suffix for the paths
/// generated by `DerivePathStr`. It does not modify the input and is only used as a
/// marker for the derive macro.
///
/// # Example
///
/// ```
/// #[path_str(prefix = "my_prefix", suffix = ".txt")]
/// ```
#[proc_macro_attribute]
pub fn path_str(_args: TokenStream, input: TokenStream) -> TokenStream {
    // This attribute doesn't modify the input, it's just a marker
    input
}
