package zed:extension;

world extension {
    import lsp;

    use lsp.{completion, symbol};

    export init-extension: func();

    record github-release {
        version: string,
        assets: list<github-release-asset>,
    }

    record github-release-asset {
        name: string,
        download-url: string,
    }

    record github-release-options {
        require-assets: bool,
        pre-release: bool,
    }

    enum os {
        mac,
        linux,
        windows,
    }

    enum architecture {
        aarch64,
        x86,
        x8664,
    }

    enum downloaded-file-type {
        gzip,
        gzip-tar,
        zip,
        uncompressed,
    }

    variant language-server-installation-status {
        none,
        downloading,
        checking-for-update,
        failed(string),
    }

    /// Gets the current operating system and architecture
    import current-platform: func() -> tuple<os, architecture>;

    /// Get the path to the node binary used by Zed.
    import node-binary-path: func() -> result<string, string>;

    /// Gets the latest version of the given NPM package.
    import npm-package-latest-version: func(package-name: string) -> result<string, string>;

    /// Returns the installed version of the given NPM package, if it exists.
    import npm-package-installed-version: func(package-name: string) -> result<option<string>, string>;

    /// Installs the specified NPM package.
    import npm-install-package: func(package-name: string, version: string) -> result<_, string>;

    /// Gets the latest release for the given GitHub repository.
    import latest-github-release: func(repo: string, options: github-release-options) -> result<github-release, string>;

    /// Downloads a file from the given url, and saves it to the given path within the extension's
    /// working directory. Extracts the file according to the given file type.
    import download-file: func(url: string, file-path: string, file-type: downloaded-file-type) -> result<_, string>;

    /// Makes the file at the given path executable.
    import make-file-executable: func(filepath: string) -> result<_, string>;

    /// Updates the installation status for the given language server.
    import set-language-server-installation-status: func(language-server-name: string, status: language-server-installation-status);

    type env-vars = list<tuple<string, string>>;

    record command {
        command: string,
        args: list<string>,
        env: env-vars,
    }

    resource worktree {
        read-text-file: func(path: string) -> result<string, string>;
        which: func(binary-name: string) -> option<string>;
        shell-env: func() -> env-vars;
    }

    export language-server-command: func(language-server-id: string, worktree: borrow<worktree>) -> result<command, string>;
    export language-server-initialization-options: func(language-server-id: string, worktree: borrow<worktree>) -> result<option<string>, string>;

    record code-label {
        /// The source code to parse with Tree-sitter.
        code: string,
        spans: list<code-label-span>,
        filter-range: range,
    }

    variant code-label-span {
        /// A range into the parsed code.
        code-range(range),
        literal(code-label-span-literal),
    }

    record code-label-span-literal {
        text: string,
        highlight-name: option<string>,
    }

    record range {
        start: u32,
        end: u32,
    }

    export labels-for-completions: func(language-server-id: string, completions: list<completion>) -> result<list<option<code-label>>, string>;
    export labels-for-symbols: func(language-server-id: string, symbols: list<symbol>) -> result<list<option<code-label>>, string>;
}
