#!/usr/bin/env node --redirect-warnings=/dev/null

const { execFileSync } = require("child_process");
const { GITHUB_ACCESS_TOKEN } = process.env;
const PR_REGEX = /#\d+/; // Ex: matches on #4241
const FIXES_REGEX = /(fixes|closes|completes) (.+[/#]\d+.*)$/im;

main();

async function main() {
  // Get the last two preview tags
  const [newTag, oldTag] = execFileSync(
    "git",
    ["tag", "--sort", "-committerdate"],
    { encoding: "utf8" },
  )
    .split("\n")
    .filter((t) => t.startsWith("v") && t.endsWith("-pre"));

  // Print the previous release
  console.log(`Changes from ${oldTag} to ${newTag}\n`);

  let hasProtocolChanges = false;
  try {
    execFileSync("git", [
      "diff",
      oldTag,
      newTag,
      "--exit-code",
      "--",
      "crates/rpc",
    ]).status != 0;
  } catch (error) {
    hasProtocolChanges = true;
  }

  if (hasProtocolChanges) {
    console.warn(
      "\x1b[31;1;4mRPC protocol changes, server should be re-deployed\x1b[0m\n",
    );
  } else {
    console.log("No RPC protocol changes\n");
  }

  // Get the PRs merged between those two tags.
  const pullRequestNumbers = getPullRequestNumbers(oldTag, newTag);

  // Get the PRs that were cherry-picked between main and the old tag.
  const existingPullRequestNumbers = new Set(
    getPullRequestNumbers("main", oldTag),
  );

  // Filter out those existing PRs from the set of new PRs.
  const newPullRequestNumbers = pullRequestNumbers.filter(
    (number) => !existingPullRequestNumbers.has(number),
  );

  // Fetch the pull requests from the GitHub API.
  console.log("Merged Pull requests:");
  for (const pullRequestNumber of newPullRequestNumbers) {
    const webURL = `https://github.com/zed-industries/zed/pull/${pullRequestNumber}`;
    const apiURL = `https://api.github.com/repos/zed-industries/zed/pulls/${pullRequestNumber}`;

    const response = await fetch(apiURL, {
      headers: {
        Authorization: `token ${GITHUB_ACCESS_TOKEN}`,
      },
    });

    // Print the pull request title and URL.
    const pullRequest = await response.json();
    const releaseNotesHeader = /^\s*(?:Release )?Notes\s*:(.+)/ims;

    let releaseNotes = pullRequest.body || "";
    const captures = releaseNotesHeader.exec(releaseNotes);
    const notes = captures ? captures[1] : "MISSING";
    const skippableNoteRegex = /^\s*-?\s*n\/?a\s*/ims;

    if (skippableNoteRegex.exec(notes) != null) {
      continue;
    }
    console.log("*", pullRequest.title);
    console.log("  PR URL:    ", webURL);

    // If the pull request contains a 'closes' line, print the closed issue.
    const fixesMatch = (pullRequest.body || "").match(FIXES_REGEX);
    if (fixesMatch) {
      const fixedIssueURL = fixesMatch[2];
      console.log("  Issue URL:    ", fixedIssueURL);
    }

    releaseNotes = notes.trim().split("\n");
    console.log("  Release Notes:");

    for (const line of releaseNotes) {
      console.log(`    ${line}`);
    }

    console.log();
  }
}

function getPullRequestNumbers(oldTag, newTag) {
  const pullRequestNumbers = execFileSync(
    "git",
    ["log", `${oldTag}..${newTag}`, "--oneline"],
    { encoding: "utf8" },
  )
    .split("\n")
    .filter((line) => line.length > 0)
    .map((line) => {
      const match = line.match(/#(\d+)/);
      return match ? match[1] : null;
    })
    .filter((line) => line);

  return pullRequestNumbers;
}
