#!/bin/bash

set -e

export ZED_BUNDLE=true

echo "Installing cargo bundle"
cargo install cargo-bundle --version 0.5.0

# Deal with versions of macOS that don't include libstdc++ headers
export CXXFLAGS="-stdlib=libc++"

echo "Compiling binaries"
cargo build --release --package zed --target aarch64-apple-darwin
cargo build --release --package zed --target x86_64-apple-darwin
cargo build --release --package cli --target aarch64-apple-darwin
cargo build --release --package cli --target x86_64-apple-darwin

echo "Creating application bundle"
(cd crates/zed && cargo bundle --release --target x86_64-apple-darwin)

TEMP_RELEASE_DIR_PATH="target/x86_64-apple-darwin/release/bundle/osx"
APP_PATH="${TEMP_RELEASE_DIR_PATH}/Zed.app"

echo "Creating fat binaries"
lipo \
    -create \
    target/{x86_64-apple-darwin,aarch64-apple-darwin}/release/Zed \
    -output \
    $APP_PATH/Contents/MacOS/zed
lipo \
    -create \
    target/{x86_64-apple-darwin,aarch64-apple-darwin}/release/cli \
    -output \
    $APP_PATH/Contents/MacOS/cli

if [[ -n $MACOS_CERTIFICATE && -n $MACOS_CERTIFICATE_PASSWORD && -n $APPLE_NOTARIZATION_USERNAME && -n $APPLE_NOTARIZATION_PASSWORD ]]; then
    echo "Signing bundle with Apple-issued certificate"
    security create-keychain -p $MACOS_CERTIFICATE_PASSWORD zed.keychain || echo ""
    security default-keychain -s zed.keychain
    security unlock-keychain -p $MACOS_CERTIFICATE_PASSWORD zed.keychain
    echo $MACOS_CERTIFICATE | base64 --decode > /tmp/zed-certificate.p12
    security import /tmp/zed-certificate.p12 -k zed.keychain -P $MACOS_CERTIFICATE_PASSWORD -T /usr/bin/codesign
    rm /tmp/zed-certificate.p12
    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $MACOS_CERTIFICATE_PASSWORD zed.keychain
    /usr/bin/codesign --force --deep --timestamp --options runtime --sign "Zed Industries, Inc." $APP_PATH -v
    security default-keychain -s login.keychain
else
    echo "One or more of the following variables are missing: MACOS_CERTIFICATE, MACOS_CERTIFICATE_PASSWORD, APPLE_NOTARIZATION_USERNAME, APPLE_NOTARIZATION_PASSWORD"
    echo "Performing an ad-hoc signature, but this bundle should not be distributed"
    codesign --force --deep --sign - $APP_PATH -v
fi

RELEASE_DIR_PATH="target/release"
VERSION=$(cd crates/zed && cargo-get version)
DMG_PATH="${RELEASE_DIR_PATH}/Zed_v${VERSION}.dmg"

echo "Creating DMG"
mkdir -p $RELEASE_DIR_PATH
ln -s /Applications $TEMP_RELEASE_DIR_PATH
hdiutil create -volname Zed -srcfolder $TEMP_RELEASE_DIR_PATH -ov -format UDZO $DMG_PATH
# If someone runs this bundle script locally, a symlink will be placed in `TEMP_RELEASE_DIR_PATH`.  
# This symlink causes CPU issues with Zed if the Zed codebase is opened in Zed, so we simply remove it for now.
rm $TEMP_RELEASE_DIR_PATH/Applications

if [[ -n $MACOS_CERTIFICATE && -n $MACOS_CERTIFICATE_PASSWORD && -n $APPLE_NOTARIZATION_USERNAME && -n $APPLE_NOTARIZATION_PASSWORD ]]; then
    echo "Notarizing DMG with Apple"
    npm install -g notarize-cli
    npx notarize-cli --file $DMG_PATH --bundle-id dev.zed.Zed --username $APPLE_NOTARIZATION_USERNAME --password $APPLE_NOTARIZATION_PASSWORD
fi

# If -o option is specified, open the $RELEASE_DIR_PATH directory in Finder to reveal the DMG
while getopts o flag
do
    case "${flag}" in
        o) open $RELEASE_DIR_PATH;;
    esac
done
