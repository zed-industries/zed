#!/bin/bash

set -e

export ZED_BUNDLE=true
export MACOSX_DEPLOYMENT_TARGET=10.15.7

which cargo-bundle > /dev/null || cargo install cargo-bundle --version 0.5.0
rustup target add wasm32-wasi

# Deal with versions of macOS that don't include libstdc++ headers
export CXXFLAGS="-stdlib=libc++"

echo "Compiling zed binary for aarch64-apple-darwin"
cargo build --release --package zed --target aarch64-apple-darwin
echo "Compiling zed binary for x86_64-apple-darwin"
cargo build --release --package zed --target x86_64-apple-darwin
echo "Compiling cli binary for aarch64-apple-darwin"
cargo build --release --package cli --target aarch64-apple-darwin
echo "Compiling cli binary for x86_64-apple-darwin"
cargo build --release --package cli --target x86_64-apple-darwin

echo "Creating application bundle"
pushd crates/zed
channel=$(cat RELEASE_CHANNEL)
cp Cargo.toml Cargo.toml.backup
sed \
    -i .backup \
    "s/package.metadata.bundle-${channel}/package.metadata.bundle/" \
    Cargo.toml
app_path=$(cargo bundle --release --target x86_64-apple-darwin | xargs)
mv Cargo.toml.backup Cargo.toml
popd
echo "Bundled ${app_path}"

echo "Creating fat binaries"
lipo \
    -create \
    target/{x86_64-apple-darwin,aarch64-apple-darwin}/release/Zed \
    -output \
    "${app_path}/Contents/MacOS/zed"
lipo \
    -create \
    target/{x86_64-apple-darwin,aarch64-apple-darwin}/release/cli \
    -output \
    "${app_path}/Contents/MacOS/cli"

echo "Copying WebRTC.framework into the frameworks folder"
mkdir "${app_path}/Contents/Frameworks"
cp -R target/x86_64-apple-darwin/release/WebRTC.framework "${app_path}/Contents/Frameworks/"

if [[ -n $MACOS_CERTIFICATE && -n $MACOS_CERTIFICATE_PASSWORD && -n $APPLE_NOTARIZATION_USERNAME && -n $APPLE_NOTARIZATION_PASSWORD ]]; then
    echo "Signing bundle with Apple-issued certificate"
    security create-keychain -p "$MACOS_CERTIFICATE_PASSWORD" zed.keychain || echo ""
    security default-keychain -s zed.keychain
    security unlock-keychain -p "$MACOS_CERTIFICATE_PASSWORD" zed.keychain
    echo "$MACOS_CERTIFICATE" | base64 --decode > /tmp/zed-certificate.p12
    security import /tmp/zed-certificate.p12 -k zed.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
    rm /tmp/zed-certificate.p12
    security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CERTIFICATE_PASSWORD" zed.keychain
    /usr/bin/codesign --force --deep --timestamp --options runtime --sign "Zed Industries, Inc." "${app_path}" -v
    security default-keychain -s login.keychain
else
    echo "One or more of the following variables are missing: MACOS_CERTIFICATE, MACOS_CERTIFICATE_PASSWORD, APPLE_NOTARIZATION_USERNAME, APPLE_NOTARIZATION_PASSWORD"
    echo "Performing an ad-hoc signature, but this bundle should not be distributed"
    codesign --force --deep --sign - "${app_path}" -v
fi

dmg_target_directory="target/release"
dmg_source_directory="${dmg_target_directory}/dmg"
dmg_file_path="${dmg_target_directory}/Zed.dmg"

echo "Creating DMG"
rm -rf ${dmg_file_path}
rm -rf ${dmg_source_directory}
mkdir -p ${dmg_source_directory}
mv "${app_path}" "${dmg_source_directory}"

npm install -g appdmg
appdmg "dmg_config.json" "${dmg_file_path}"

if [[ -n $MACOS_CERTIFICATE && -n $MACOS_CERTIFICATE_PASSWORD && -n $APPLE_NOTARIZATION_USERNAME && -n $APPLE_NOTARIZATION_PASSWORD ]]; then
    echo "Notarizing DMG with Apple"
    npm install -g notarize-cli
    npx notarize-cli --file ${dmg_file_path} --bundle-id dev.zed.Zed --username "$APPLE_NOTARIZATION_USERNAME" --password "$APPLE_NOTARIZATION_PASSWORD"
fi

# If -o option is specified, open the $dmg_target_directory directory in Finder to reveal the DMG
while getopts o flag
do
    case "${flag}" in
        o) open $dmg_target_directory;;
    esac
done
