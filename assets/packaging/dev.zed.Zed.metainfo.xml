<?xml version="1.0" encoding="UTF-8"?>
<component type="desktop-application">
    <id>dev.zed.Zed</id>
    <name>Zed</name>
    <developer>dev.zed</developer>
    <icon>dev.zed.Zed</icon>
    <launchable type="desktop-id">dev.zed.Zed.desktop</launchable>

    <metadata_license>MIT</metadata_license>
    <project_license>AGPL-3.0-or-later and Apache-2.0 and GPL-3.0-or-later</project_license>

    <summary>High-Performance, Multiplayer Code Editor</summary>
    <description>
        <p>
            Productive coding starts with a tool that stays out of your way. Zed combines the power of an IDE with the responsiveness of a lightweight editor for productivity you can feel under your fingertips.
        </p>
        <p>
            Zed efficiently leverages every CPU core and your GPU to start instantly, load files in a blink, and respond to your keystrokes on the next display refresh. Unrelenting performance keeps you in flow and makes other tools feel slow.
        </p>
        <p>
            Save time and keystrokes by generating code with AI. Zed supports GitHub Copilot out of the box, and you can use GPT-4 to generate or refactor code by pressing ctrl-enter and typing a natural language prompt. Interact with the model conversationally without switching context in the built-in assistant panel, then reference your conversation during inline generation.
        </p>
        <p>
            Zed maintains a full syntax tree for every buffer as you type, enabling precise code highlighting, auto-indent, a searchable outline view, and structural selection. Zed also speaks the Language Server Protocol to provide autocompletion, code navigation, diagnostics, and refactorings.
        </p>
        <p>
            With Zed, multiple developers can navigate and edit within a shared workspace. This makes it easy to have nuanced, real-time conversations about any part of your codebase, whether the code in question was committed last year or hasn't yet been saved to disk.
        </p>
        <p>
            Channels are spaces to discuss, plan, and write software with your team. Each channel has a shared document for taking notes and tracking projects, and channels nest in a hierarchy to keep you organized. Share projects with the channel and use audio or text-based chat to engage collaborators in real time.
        </p>
        <p>
            When you join a teammate's project, you can navigate and edit as if the code is on your local machine. Open any file, type with low latency, and interact with language servers. It all works seamlessly, whether you're working with someone at the next desk or on a different continent.
        </p>
        <p>
            Jump to a teammate's location and follow them around the code, then switch roles and have them follow you. It's a great way to review changes or help a new teammate get oriented in your codebase. You can also use the built-in screen sharing to follow someone outside of Zed to view documentation or experiment with an app in development.
        </p>
        <p>
            Great products begin with great engineering. We care hard about implementation details you don't see to produce an editor you will forget you are using.
        </p>
        <p>
            Zed's breakthrough performance starts with our GPUI framework, a new way to build 2D user interfaces. GPUI rasterizes the entire window on the GPU, just like a 3D video game. The result? Fast, reliable, and smooth delivery of pixels on every frame.
        </p>
        <p>
            Rust's unique type system lets us parallelize work across multiple cores without compromising application stability. Zed uses copy-on-write data structures and Rust's expressive async primitives to shift CPU-intensive tasks away from the main thread, yielding responsiveness that wouldn't be possible in a single-threaded editor.
        </p>
        <p>
            Performance and power mean nothing without reliability. That's why we've subjected Zed's critical code paths to randomized tests that help us find and fix rare edge cases. By creating controlled chaos in development, we achieve stability in production.
        </p>
        <p>
            Regular expressions are the wrong tool for analyzing context-free languages. That's why we created Tree-sitter, an open-source parsing framework based on the same theoretical foundation used in compilers: context-free grammars. Tree-sitter uses an incremental version of generalized LR parsing, enabling language-aware features for a general-purpose editor that were once only possible in language-specific IDEs.
        </p>
        <p>
            Conflict-Free Replicated Data Types, or CRDTs, are a class of eventually-consistent data structures that allow data to be kept in sync in the face of concurrent mutations. In Zed, every buffer is a CRDT by default, which provides a foundation for multiple forms of collaboration. They're also a key component of the multi-threaded architecture that makes Zed a joy to use on your own.
        </p>
    </description>

    <url type="homepage">https://zed.dev</url>
    <url type="bugtracker">https://github.com/zed-industries/zed/issues</url>
    <url type="faq">https://zed.dev/faq</url>
    <url type="help">https://zed.dev/docs/getting-started</url>
    <url type="contact">https://zed.dev/docs/feedback-and-support</url>
    <url type="vcs-browser">https://github.com/zed-industries/zed</url>
    <url type="contribute">https://github.com/zed-industries/zed/blob/main/CONTRIBUTING.md</url>

    <categories>
        <category>Development</category>
        <category>Utility</category>
        <category>IDE</category>
        <category>TextEditor</category>
    </categories>

    <keywords>
        <keyword>development</keyword>
        <keyword>programming</keyword>
        <keyword>code</keyword>
        <keyword>editor</keyword>
    </keywords>

    <supports>
        <control>touch</control>
        <internet>offline-only</internet>
    </supports>
    <recommends>
        <control>pointing</control>
        <display_length compare="ge">768</display_length>
    </recommends>
    <requires>
        <control>keyboard</control>
    </requires>

    <content_rating type="oars-1.1">
        <content_attribute id="social-chat">intense</content_attribute>
        <content_attribute id="social-audio">intense</content_attribute>
    </content_rating>
</component>